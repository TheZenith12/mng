import File from "../models/fileModel.js";
import Resort from "../models/resortModel.js";
import path from "path";
import fs from "fs";

// ============================================
// ‚úÖ GET all files
// ============================================
export const getFiles = async (req, res) => {
  try {
    const files = await File.find()
      .populate("resortsId") // ‚úÖ resortsId –≥—ç–∂ populate —Ö–∏–π—Ö —ë—Å—Ç–æ–π
      .sort({ createdAt: -1 });

    res.json(files);
  } catch (err) {
    console.error("‚ùå getFiles –∞–ª–¥–∞–∞:", err);
    res.status(500).json({ message: err.message });
  }
};

// ============================================
// ‚úÖ Upload one image or video file
// ============================================
export const uploadFile = async (req, res) => {
  try {
    const { resortId } = req.body;
    const file = req.file;

    if (!file) {
      return res.status(400).json({ message: "–§–∞–π–ª –∏–ª–≥—ç—ç–≥—ç—ç–≥“Ø–π –±–∞–π–Ω–∞." });
    }

    if (!resortId) {
      return res.status(400).json({ message: "resortId —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π." });
    }

    // ‚úÖ Resort –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
    const resort = await Resort.findById(resortId);
    if (!resort) {
      return res.status(404).json({ message: "Resort –æ–ª–¥—Å–æ–Ω–≥“Ø–π." });
    }

    // ‚úÖ –§–∞–π–ª—ã–Ω URL “Ø“Ø—Å–≥—ç–Ω—ç
    const fileUrl = `/uploads/resorts/${file.filename}`;

    // ‚úÖ MongoDB-–¥ —Ö–∞–¥–≥–∞–ª–Ω–∞
    const newFile = new File({
      resortsId: resortId,
      filename: file.originalname,
      size: file.size,
      mimetype: file.mimetype,
      image: file.mimetype.startsWith("image") ? fileUrl : "",
      video: file.mimetype.startsWith("video") ? fileUrl : "",
    });

    await newFile.save();

    // ‚úÖ Resort –¥–æ—Ç–æ—Ä file —Ö–æ–ª–±–æ–Ω–æ
    await Resort.findByIdAndUpdate(resortId, { $push: { files: newFile._id } });

    res.status(201).json({
      success: true,
      message: "üì∏ –§–∞–π–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π —Ö–∞–¥–≥–∞–ª–∞–≥–¥–ª–∞–∞",
      file: newFile,
    });
  } catch (err) {
    console.error("‚ùå Upload file error:", err);
    res.status(500).json({ message: err.message });
  }
};

// ============================================
// ‚úÖ Delete file
// ============================================
export const deleteFile = async (req, res) => {
  try {
    const { id } = req.params;

    const file = await File.findById(id);
    if (!file) return res.status(404).json({ message: "–§–∞–π–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π." });

    // ‚úÖ –£—Å—Ç–≥–∞—Ö –∑–∞–º—ã–≥ —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–æ—Ö
    const filePath = path.join(
      process.cwd(),
      "public",
      file.image || file.video
    );

    // ‚úÖ –§–∞–π–ª—ã–≥ —É—Å—Ç–≥–∞—Ö
    if (fs.existsSync(filePath)) {
      fs.unlinkSync(filePath);
      console.log("üóëÔ∏è –§–∞–π–ª —É—Å—Ç–≥–∞—Å–∞–Ω:", filePath);
    }

    // ‚úÖ Resort-–æ–æ—Å —Ö–æ–ª–±–æ–æ–≥ —É—Å—Ç–≥–∞–Ω–∞
    await Resort.updateMany({ files: id }, { $pull: { files: id } });

    // ‚úÖ MongoDB-–æ–æ—Å —É—Å—Ç–≥–∞–Ω–∞
    await File.findByIdAndDelete(id);

    res.json({ success: true, message: "üóëÔ∏è –§–∞–π–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π —É—Å—Ç–≥–∞–≥–¥–ª–∞–∞" });
  } catch (err) {
    console.error("‚ùå deleteFile –∞–ª–¥–∞–∞:", err);
    res.status(500).json({ success: false, message: err.message });
  }
};

export const createResort = async (req, res) => {
  try {
    // Resort “Ø“Ø—Å–≥—ç—Ö –ª–æ–≥–∏–∫ —ç–Ω–¥ –±–∏—á
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};
