import mongoose from "mongoose";
import Resort from "../models/resortModel.js";
import File from "../models/fileModel.js";
import path from "path";
import fs from "fs";

// ‚úÖ GET all resorts
export const getResorts = async (req, res) => {
  try {
    const resorts = await Resort.find().sort({ createdAt: -1 });
    res.json(resorts);
  } catch (err) {
    console.error("‚ùå getResorts –∞–ª–¥–∞–∞:", err);
    res.status(500).json({ message: err.message });
  }
};

// ‚úÖ GET one resort
export const getResortById = async (req, res) => {
  try {
    const resort = await Resort.findById(req.params.id);
    if (!resort) return res.status(404).json({ message: "Resort –æ–ª–¥—Å–æ–Ω–≥“Ø–π" });

    // Resort-–¥ —Ö–æ–ª–±–æ–≥–¥—Å–æ–Ω —Ñ–∞–π–ª—É—É–¥—ã–≥ —Ç—É—Å–∞–¥ –Ω—å —Ç–∞—Ç–∞—Ö
    const files = await File.find({ resortsId: resort._id });

    res.json({ resort, files });
  } catch (err) {
    console.error("‚ùå getResortById –∞–ª–¥–∞–∞:", err);
    res.status(500).json({ message: err.message });
  }
};

// ‚úÖ CREATE new resort + upload files
export const createResort = async (req, res) => {
  try {
    const { name, description, price, location } = req.body;

    // –≠—Ö–ª—ç—ç–¥ Resort “Ø“Ø—Å–≥—ç–Ω—ç
    const resort = new Resort({
      name,
      description,
      price,
      location,
    });

    const savedResort = await resort.save();

    // ‚ö° Upload —Ö–∏–π—Å—ç–Ω —Ñ–∞–π–ª—É—É–¥—ã–≥ —Ö–∞–¥–≥–∞–ª–∞—Ö
    if (req.files && req.files.length > 0) {
      for (const file of req.files) {
        const fileUrl = `/uploads/resorts/${file.filename}`;

        const newFile = new File({
          resortsId: savedResort._id,
          filename: file.originalname,
          size: file.size,
          mimetype: file.mimetype,
          image: file.mimetype.startsWith("image/") ? fileUrl : "",
          video: file.mimetype.startsWith("video/") ? fileUrl : "",
        });

        await newFile.save();
      }

      console.log("‚úÖ Files saved successfully");
    }

    res.status(201).json({
      success: true,
      message: "üèïÔ∏è Resort –∞–º–∂–∏–ª—Ç—Ç–∞–π –Ω—ç–º—ç–≥–¥–ª—ç—ç",
      resort: savedResort,
    });
  } catch (error) {
    console.error("‚ùå Resort “Ø“Ø—Å–≥—ç—Ö—ç–¥ –∞–ª–¥–∞–∞:", error);
    res
      .status(500)
      .json({ success: false, message: "Resort “Ø“Ø—Å–≥—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞" });
  }
};

// ‚úÖ UPDATE resort
export const updateResort = async (req, res) => {
  try {
    const { id } = req.params;
    const { name, description, price, location } = req.body;

    const resort = await Resort.findById(id);
    if (!resort) return res.status(404).json({ message: "Resort –æ–ª–¥—Å–æ–Ω–≥“Ø–π" });

    resort.name = name || resort.name;
    resort.description = description || resort.description;
    resort.price = price || resort.price;
    resort.location = location || resort.location;

    await resort.save();

    // –•—ç—Ä–≤—ç—ç —à–∏–Ω—ç —Ñ–∞–π–ª upload —Ö–∏–π—Å—ç–Ω –±–æ–ª —Ö–∞–¥–≥–∞–ª–∞—Ö
    if (req.files && req.files.length > 0) {
      for (const file of req.files) {
        const fileUrl = `/uploads/resorts/${file.filename}`;

        const newFile = new File({
          resortsId: resort._id,
          filename: file.originalname,
          size: file.size,
          mimetype: file.mimetype,
          image: file.mimetype.startsWith("image/") ? fileUrl : "",
          video: file.mimetype.startsWith("video/") ? fileUrl : "",
        });

        await newFile.save();
      }
    }

    const files = await File.find({ resortsId: resort._id });

    res.json({
      success: true,
      message: "üèùÔ∏è Resort —à–∏–Ω—ç—á–ª—ç–≥–¥–ª—ç—ç",
      resort,
      files,
    });
  } catch (err) {
    console.error("‚ùå Resort —à–∏–Ω—ç—á–ª—ç—Ö—ç–¥ –∞–ª–¥–∞–∞:", err);
    res.status(500).json({ message: err.message });
  }
};

// ‚úÖ DELETE resort + related files
export const deleteResort = async (req, res) => {
  try {
    const { id } = req.params;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ message: "–ë—É—Ä—É—É ID —Ñ–æ—Ä–º–∞—Ç –±–∞–π–Ω–∞" });
    }

    const resort = await Resort.findById(id);
    if (!resort) return res.status(404).json({ message: "Resort –æ–ª–¥—Å–æ–Ω–≥“Ø–π" });

    // üßπ –•–æ–ª–±–æ–≥–¥—Å–æ–Ω —Ñ–∞–π–ª—É—É–¥—ã–≥ —É—Å—Ç–≥–∞—Ö
    const files = await File.find({ resortsId: id });

    for (const file of files) {
      const filePath =
        file.image || file.video
          ? path.join("public", file.image || file.video)
          : null;

      if (filePath && fs.existsSync(filePath)) {
        fs.unlinkSync(filePath);
        console.log("üóëÔ∏è –§–∞–π–ª —É—Å—Ç–≥–∞—Å–∞–Ω:", filePath);
      }

      await File.findByIdAndDelete(file._id);
    }

    // Resort —É—Å—Ç–≥–∞—Ö
    await Resort.findByIdAndDelete(id);

    res.json({
      success: true,
      message: "üóëÔ∏è Resort –±–æ–ª–æ–Ω —Ö–æ–ª–±–æ–≥–¥—Å–æ–Ω —Ñ–∞–π–ª—É—É–¥ —É—Å—Ç–≥–∞–≥–¥–ª–∞–∞",
    });
  } catch (err) {
    console.error("‚ùå Resort —É—Å—Ç–≥–∞—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞:", err);
    res.status(500).json({ message: err.message });
  }
};
