import mongoose from "mongoose";
import Resort from "../models/resortModel.js";
import File from "../models/fileModel.js";
import path from "path";
import fs from "fs";
import { v4 as uuidv4 } from "uuid";

// ============================================
// ‚úÖ –ê–¥–º–∏–Ω–∞–∞—Å –∑”©–≤—Ö”©–Ω list —Ö–∞—Ä–∂ –±–∞–π–≥–∞–∞ –Ω—å —à“Ø“Ø
// ============================================

export const getResorts = async (req, res) => {
  try {
    const resorts = await Resort.aggregate([
      {
        $lookup: {
          from: "files",           // File collection
          localField: "_id",       // Resort._id
          foreignField: "resortsId", // File.resortsId
          as: "files"
        }
      },
      {
        $addFields: {
          image: { 
            $arrayElemAt: [ "$files.images", 0 ] // —ç—Ö–Ω–∏–π –∑—É—Ä–∞–≥ –ª –∞–≤–Ω–∞
          }
        }
      },
      {
        $project: {
          files: 0, // files array-–≥ –Ω—É—É—Ö
          __v: 0
        }
      },
      { $sort: { createdAt: -1 } }
    ]);

    res.status(200).json({
      success: true,
      count: resorts.length,
      resorts
    });
  } catch (err) {
    console.error("‚ùå getResorts –∞–ª–¥–∞–∞:", err);
    res.status(500).json({ success: false, message: err.message });
  }
};




// ============================================
// ‚úÖ GET resort by ID
// ============================================
export const getResortById = async (req, res) => {
  try {
    const resort = await Resort.findById(req.params.id);
    if (!resort) return res.status(404).json({ message: "Resort –æ–ª–¥—Å–æ–Ω–≥“Ø–π" });

    // Resort-–¥ —Ö–æ–ª–±–æ–≥–¥—Å–æ–Ω —Ñ–∞–π–ª—É—É–¥—ã–≥ –∞–≤—á—Ä–∞—Ö
    const files = await File.find({ resortsId: resort._id });

    res.json({ resort, files });
  } catch (err) {
    console.error("‚ùå getResortById –∞–ª–¥–∞–∞:", err);
    res.status(500).json({ message: err.message });
  }
};

// ============================================
// ‚úÖ CREATE new resort
// ============================================

export const createResort = async (req, res) => {
  try {
    const { name, description, price, location } = req.body;
    console.log("create begin");

    // 1Ô∏è‚É£ Resort “Ø“Ø—Å–≥—ç—Ö
    const newResort = new Resort({
      name,
      description,
      price,
      location,
    });

    const savedResort = await newResort.save();

    // --- newFile-–∏–π–≥ –≥–∞–¥–Ω–∞ –∑–∞—Ä–ª–∞—Ö ---
    let newFile;

    // 2Ô∏è‚É£ –§–∞–π–ª—É—É–¥ —Ö–∞–¥–≥–∞–ª–∞—Ö
    if (req.files && (req.files.images || req.files.videos)) {
      const images =
        req.files.images?.map((f) => `/uploads/resorts/${f.filename}`) || [];

      const videos =
        req.files.videos?.map((f) => `/uploads/resorts/${f.filename}`) || [];

      newFile = new File({
        resortsId: savedResort._id,
        images,
        videos,
      });

      await newFile.save();
    }

    res.status(201).json({
      success: true,
      message: "üèïÔ∏è Resort –∞–º–∂–∏–ª—Ç—Ç–∞–π –Ω—ç–º—ç–≥–¥–ª—ç—ç",
      resort: savedResort,
    });
  } catch (error) {
    console.error("‚ùå Resort “Ø“Ø—Å–≥—ç—Ö—ç–¥ –∞–ª–¥–∞–∞:", error);
    res.status(500).json({ success: false, message: error.message });
  }
};


//  UPDATE resort 
export const updateResort = async (req, res) => {
  try {
    const { id } = req.params;
    const { name, description, price, location, removedImages, removedVideos } = req.body;

    // üß© JSON string-“Ø“Ø–¥–∏–π–≥ parse —Ö–∏–π—Ö
    const parsedRemovedImages = removedImages ? JSON.parse(removedImages) : [];
    const parsedRemovedVideos = removedVideos ? JSON.parse(removedVideos) : [];

    // üß© Resort –æ–ª–æ—Ö
    const resort = await Resort.findById(id);
    if (!resort) {
      return res.status(404).json({ message: "Resort –æ–ª–¥—Å–æ–Ω–≥“Ø–π" });
    }

    // üß© Resort “Ø–Ω–¥—Å—ç–Ω –º—ç–¥—ç—ç–ª—ç–ª —à–∏–Ω—ç—á–ª—ç—Ö
    resort.name = name || resort.name;
    resort.description = description || resort.description;
    resort.price = price || resort.price;
    resort.location = location || resort.location;
    await resort.save();

    // =============================
    // üóëÔ∏è –£—Å—Ç–≥–∞—Å–∞–Ω –∑—É—Ä–∞–≥, –±–∏—á–ª—ç–≥–∏–π–≥ —É—Å—Ç–≥–∞—Ö
    // =============================

    // üì∏ –ó—É—Ä–∞–≥ —É—Å—Ç–≥–∞—Ö
    for (const imgPath of parsedRemovedImages) {
      const fullPath = path.join(process.cwd(), "public", imgPath.replace(/^\/+/, ""));
      if (fs.existsSync(fullPath)) {
        fs.unlinkSync(fullPath);
        console.log("üßπ Deleted image:", fullPath);
      }
    }

    // üé• –í–∏–¥–µ–æ —É—Å—Ç–≥–∞—Ö
    for (const vidPath of parsedRemovedVideos) {
      const fullPath = path.join(process.cwd(), "public", vidPath.replace(/^\/+/, ""));
      if (fs.existsSync(fullPath)) {
        fs.unlinkSync(fullPath);
        console.log("üßπ Deleted video:", fullPath);
      }
    }

    // =============================
    // üß© DB –¥–æ—Ç–æ—Ä—Ö images/videos array-—Å —É—Å—Ç–≥–∞—Ö
    // =============================
    if (parsedRemovedImages.length > 0) {
      await File.updateMany(
        { resortsId: id },
        { $pull: { images: { $in: parsedRemovedImages } } }
      );
    }

    if (parsedRemovedVideos.length > 0) {
      await File.updateMany(
        { resortsId: id },
        { $pull: { videos: { $in: parsedRemovedVideos } } }
      );
    }

    // =============================
    // üß© –®–∏–Ω—ç –∑—É—Ä–∞–≥ –±–æ–ª–æ–Ω –±–∏—á–ª—ç–≥ –Ω—ç–º—ç—Ö
    // =============================
    console.log("req.files:", req.files);

    // --- —à–∏–Ω—ç –∑—É—Ä–∞–≥ ---
    if (req.files && req.files.images) {
      const images =
        req.files.images.map((f) => `/uploads/resorts/${f.filename}`) || [];
      console.log("üì∏ New images:", images);

      await File.updateOne(
        { resortsId: resort._id },
        { $push: { images: { $each: images } } },
        { upsert: true } // File –±–∏—á–ª—ç–≥ –±–∞–π—Ö–≥“Ø–π –±–æ–ª “Ø“Ø—Å–≥—ç–Ω—ç
      );
    }

    // --- —à–∏–Ω—ç –±–∏—á–ª—ç–≥ ---
    if (req.files && req.files.videos) {
      const videos =
        req.files.videos.map((f) => `/uploads/resorts/${f.filename}`) || [];
      console.log("üé• New videos:", videos);

      await File.updateOne(
        { resortsId: resort._id },
        { $push: { videos: { $each: videos } } },
        { upsert: true }
      );
    }

    // =============================
    // üßπ –•–æ–æ—Å–æ–Ω file –±–∏—á–ª—ç–≥ —É—Å—Ç–≥–∞—Ö
    // =============================
    await File.deleteMany({
      resortsId: id,
      $and: [
        { images: { $size: 0 } },
        { videos: { $size: 0 } },
      ],
    });

    // =============================
    // ‚úÖ –ê–º–∂–∏–ª—Ç—Ç–∞–π —Ö–∞—Ä–∏—É –±—É—Ü–∞–∞—Ö
    // =============================
    const files = await File.find({ resortsId: resort._id });
    res.json({
      success: true,
      message: "‚úÖ Resort –∑—É—Ä–∞–≥ –±–æ–ª–æ–Ω –±–∏—á–ª—ç–≥ –∞–º–∂–∏–ª—Ç—Ç–∞–π —à–∏–Ω—ç—á–ª—ç–≥–¥–ª—ç—ç!",
      resort,
      files,
    });

  } catch (err) {
    console.error("‚ùå Resort —à–∏–Ω—ç—á–ª—ç—Ö—ç–¥ –∞–ª–¥–∞–∞:", err);
    res.status(500).json({ message: err.message });
  }
};


// ============================================
// ‚úÖ DELETE Resort + related files
// ============================================
export const deleteResort = async (req, res) => {
  try {
    const { id } = req.params;

    // 1Ô∏è‚É£ Resort –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
    const resort = await Resort.findById(id);
    if (!resort) {
      return res.status(404).json({ success: false, message: "Resort –æ–ª–¥—Å–æ–Ω–≥“Ø–π" });
    }

    // 2Ô∏è‚É£ –•–æ–ª–±–æ–≥–¥—Å–æ–Ω File –±–∏—á–ª—ç–≥“Ø“Ø–¥–∏–π–≥ –æ–ª–æ—Ö
    const files = await File.find({ resortsId: id });

    // 3Ô∏è‚É£ File –±“Ø—Ä–∏–π–Ω images –±–æ–ª–æ–Ω videos —É—Å—Ç–≥–∞—Ö
    for (const file of files) {
      if (file.images && file.images.length > 0) {
        for (const imgPath of file.images) {
          const fullPath = path.join(process.cwd(), "public", imgPath);
          if (fs.existsSync(fullPath)) {
            fs.unlinkSync(fullPath);
            console.log("üóëÔ∏è –£—Å—Ç–≥–∞—Å–∞–Ω –∑—É—Ä–∞–≥:", imgPath);
          }
        }
      }

      if (file.videos && file.videos.length > 0) {
        for (const vidPath of file.videos) {
          const fullPath = path.join(process.cwd(), "public", vidPath);
          if (fs.existsSync(fullPath)) {
            fs.unlinkSync(fullPath);
            console.log("üóëÔ∏è –£—Å—Ç–≥–∞—Å–∞–Ω –±–∏—á–ª—ç–≥:", vidPath);
          }
        }
      }
    }

    // 4Ô∏è‚É£ File –±–∏—á–ª—ç–≥“Ø“Ø–¥–∏–π–≥ DB-—ç—ç—Å —É—Å—Ç–≥–∞—Ö
    await File.deleteMany({ resortsId: id });
    console.log("üßπ File —Ö“Ø—Å–Ω—ç–≥—Ç—ç—ç—Å —Ö–æ–ª–±–æ–≥–¥—Å–æ–Ω –±–∏—á–ª—ç–≥“Ø“Ø–¥–∏–π–≥ —É—Å—Ç–≥–∞–ª–∞–∞");

    // 5Ô∏è‚É£ Resort-–≥ —É—Å—Ç–≥–∞—Ö
    await Resort.findByIdAndDelete(id);

    res.json({
      success: true,
      message: "üèïÔ∏è Resort –±–æ–ª–æ–Ω —Ö–æ–ª–±–æ–≥–¥—Å–æ–Ω —Ñ–∞–π–ª—É—É–¥ –∞–º–∂–∏–ª—Ç—Ç–∞–π —É—Å—Ç–ª–∞–∞",
    });
  } catch (err) {
    console.error("‚ùå Resort —É—Å—Ç–≥–∞—Ö–∞–¥ –∞–ª–¥–∞–∞:", err);
    res.status(500).json({ success: false, message: err.message });
  }
};